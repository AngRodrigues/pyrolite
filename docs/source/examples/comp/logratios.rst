.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_comp_logratios.py>` to download the full example code or run this example in your browser via Binder
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_comp_logratios.py:


Logratios for Average Compositions
----------------------------------------


.. code-block:: default

    import numpy as np
    import pandas as pd
    from pyrolite.comp.codata import ilr, inverse_ilr, close
    from pyrolite.util.synthetic import random_cov_matrix
    import matplotlib.pyplot as plt
    from pyrolite.plot import pyroplot

    np.random.seed(82)








.. code-block:: default

    def random_compositional_trend(m1, m2, c1, c2, resolution=20, size=1000):
        """
        Generate a compositional trend between two compositions with independent
        variances.
        """
        # generate means intermediate between m1 and m2
        mv = np.vstack([ilr(close(m1)).reshape(1, -1), ilr(close(m2)).reshape(1, -1)])
        ms = np.apply_along_axis(lambda x: np.linspace(*x, resolution), 0, mv)
        # generate covariance matricies intermediate between c1 and c2
        cv = np.vstack([c1.reshape(1, -1), c2.reshape(1, -1)])
        cs = np.apply_along_axis(lambda x: np.linspace(*x, resolution), 0, cv)
        cs = cs.reshape(cs.shape[0], *c1.shape)
        # generate samples from each
        samples = np.vstack(
            [
                np.random.multivariate_normal(m.flatten(), cs[ix], size=size // resolution)
                for ix, m in enumerate(ms)
            ]
        )
        # combine together.
        return inverse_ilr(samples)







First we create an array of compositions which represent a trend.



.. code-block:: default

    m1, m2 = np.array([[0.3, 0.1, 2.1]]), np.array([[0.5, 2.5, 0.05]])
    c1, c2 = (
        random_cov_matrix(2, sigmas=[0.15, 0.05]),
        random_cov_matrix(2, sigmas=[0.05, 0.2]),
    )

    trend = pd.DataFrame(
        random_compositional_trend(m1, m2, c1, c2, resolution=100, size=5000)
    )







We can visualise this compositional trend with a density plot.



.. code-block:: default

    ax = trend.pyroplot.density(mode="density", bins=100)
    plt.show()



.. image:: /examples/comp/images/sphx_glr_logratios_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\ProgramData\Anaconda3_64\lib\site-packages\matplotlib\pyplot.py:514: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
      max_open_warning, RuntimeWarning)




First we can see where the geometric mean would fall:



.. code-block:: default

    ax.tax.scatter(
        close(np.nanmean(trend.values, axis=0))[np.newaxis, :] * 100,
        marker="o",
        color="r",
        label="GeoMean",
    )
    plt.show()



.. image:: /examples/comp/images/sphx_glr_logratios_002.png
    :class: sphx-glr-single-img





Finally, we can also see where the logratio mean would fall:



.. code-block:: default

    ax.tax.scatter(
        inverse_ilr(np.nanmean(ilr(trend.values), axis=0)[np.newaxis, :]) * 100,
        marker="D",
        color="k",
        label="LogMean",
    )
    plt.show()



.. image:: /examples/comp/images/sphx_glr_logratios_003.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.208 seconds)


.. _sphx_glr_download_examples_comp_logratios.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/morganjwilliams/pyrolite/develop?filepath=docs/source/examples/comp/logratios.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: logratios.py <logratios.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: logratios.ipynb <logratios.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
