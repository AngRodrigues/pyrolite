.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_geochem_lambdas_orthogonal_polynomials.py:


lambdas: Visualising Orthogonal Polynomials
============================================


.. code-block:: default

    import numpy as np
    import matplotlib.pyplot as plt
    from pyrolite.plot.spider import REE_v_radii
    from pyrolite.geochem.ind import REE, get_ionic_radii
    from pyrolite.util.math import lambdas, lambda_poly_func, OP_constants

    np.random.seed(82)


    def plot_orthagonal_polynomial_components(ax, xs, lambdas, params, log=False, **kwargs):
        """Plot polynomials on an axis over x values."""
        for w, p in zip(lambdas, params):  # plot the polynomials
            f = np.ones_like(xs) * w
            for c in p:
                f *= xs - np.float(c)
            if log:
                f = np.exp(f)

            label = (
                "$r^{}: \lambda_{}".format(len(p), len(p))
                + ["\cdot f_{}".format(len(p)), ""][int(len(p) == 0)]
                + "$"
            )
            ax.plot(xs, f, label=label, **kwargs)








First we generate some example data:



.. code-block:: default

    data_ree = REE(dropPm=True)
    data_radii = np.array(get_ionic_radii(data_ree, charge=3, coordination=8))
    lnY = (
        np.random.randn(*data_radii.shape) * 0.1
        + np.linspace(3.0, 0.0, data_radii.size)
        + (data_radii - 1.11) ** 2.0
        - 0.1
    )

    for ix, el in enumerate(data_ree):
        if el in ["Ce", "Eu"]:
            lnY[ix] += np.random.randn(1) * 0.6

    Y = np.exp(lnY)







Now we can calculate the lambdas:



.. code-block:: default

    exclude = ["Ce", "Eu"]
    if exclude:
        subset_ree = [i for i in data_ree if not i in exclude]
        subset_Y = Y[[i in subset_ree for i in data_ree]]
        subset_radii = np.array(get_ionic_radii(subset_ree, charge=3, coordination=8))
    else:
        subset_Y, subset_ree, subset_radii = Y, data_ree, data_radii

    params = OP_constants(subset_radii, degree=4)
    ls = lambdas(np.log(subset_Y), subset_radii, params=params, degree=4)
    continuous_radii = np.linspace(subset_radii[0], subset_radii[-1], 20)
    l_func = lambda_poly_func(ls, pxs=subset_radii, params=params)
    smooth_profile = np.exp(l_func(continuous_radii))








.. code-block:: default

    ax = REE_v_radii(Y, ree=data_ree, index="radii", color="0.8", label="Data")
    REE_v_radii(
        subset_Y,
        ree=subset_ree,
        ax=ax,
        index="radii",
        color="k",
        linewidth=0,
        label="Subset",
    )
    plot_orthagonal_polynomial_components(ax, continuous_radii, ls, params, log=True)
    ax.plot(continuous_radii, smooth_profile, label="Reconstructed\nProfile", c="k", lw=2)
    ax.legend(frameon=False, facecolor=None, bbox_to_anchor=(1, 1))
    plt.show()



.. image:: /examples/geochem/images/sphx_glr_lambdas_orthogonal_polynomials_001.png
    :class: sphx-glr-single-img





For more on using orthogonal polynomials to describe geochemical pattern data, see:
O’Neill, H.S.C., 2016. The Smoothness and Shapes of Chondrite-normalized Rare Earth
Element Patterns in Basalts. J Petrology 57, 1463–1508.
`doi: 10.1093/petrology/egw047 <https://doi.org/10.1093/petrology/egw047>`__.

.. seealso::

  Examples:
    `Dimensional Reduction <lambdadimreduction.html>`__,
    `REE Radii Plot <../plotting/REE_v_radii.html>`__


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.799 seconds)


.. _sphx_glr_download_examples_geochem_lambdas_orthogonal_polynomials.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://mybinder.org/badge_logo.svg
      :target: https://mybinder.org/v2/gh/morganjwilliams/pyrolite/develop?filepath=docs/source/examples/geochem/lambdas_orthogonal_polynomials.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: lambdas_orthogonal_polynomials.py <lambdas_orthogonal_polynomials.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: lambdas_orthogonal_polynomials.ipynb <lambdas_orthogonal_polynomials.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
